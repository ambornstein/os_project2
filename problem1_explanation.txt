The Summer Spectacular was implemented using semaphores. A binary semaphore was used to enforce mutual exclusion and prevent threading conflicts. Jugglers, Dancers, and Soloists were given separate counting semaphores to split them into individual queues. To prevent performer types from being deprived of stage time, active threads track the amount of performances that occurred while a different performer type was waiting for the stage. When the performance type was changed, these performers were given the ability to go on stage, incentivising the selection of performer types that have been inactive for longer. At the same time, we maximized the parallelization of the program by ensuring that the stage was always full when type was active.